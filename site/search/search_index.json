{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen beim GameMaker Tutorial f\u00fcr Brickout - Ein Breakout Klon \u00b6 Achtung Dieses Tutorial ist noch Work in Progress. \u00dcber dieses Tutorial \u00b6 In diesem Tutorial wird erkl\u00e4rt, wie man ganz einfach mithilfe von GameMaker Studio 2 ein eigenes Computerspiel erstellen kann. Das Tutorial richtet sich an Anf\u00e4nger_innen ohne jegliche Programmiererfahrung und wurde insbesondere f\u00fcr den Einsatz im Informatikunterricht konzipiert. Das gesamte Tutorial ist jedoch selbsterkl\u00e4rend und kann somit auch ohne Anleitung einer Lehrperson durchgef\u00fchrt werden. Das Spiel \u00b6 Das Spiel das in diesem Tutorial erstellt wird, ist ein ganz Simpler Klon des Klassikers Breakout. Lizenz \u00b6 Das gesamte Porjekt steht unter der Creative Commons CC0 Lizenz","title":"0 Einleitung"},{"location":"#willkommen-beim-gamemaker-tutorial-fur-brickout-ein-breakout-klon","text":"Achtung Dieses Tutorial ist noch Work in Progress.","title":"Willkommen beim GameMaker Tutorial f\u00fcr Brickout - Ein Breakout Klon"},{"location":"#uber-dieses-tutorial","text":"In diesem Tutorial wird erkl\u00e4rt, wie man ganz einfach mithilfe von GameMaker Studio 2 ein eigenes Computerspiel erstellen kann. Das Tutorial richtet sich an Anf\u00e4nger_innen ohne jegliche Programmiererfahrung und wurde insbesondere f\u00fcr den Einsatz im Informatikunterricht konzipiert. Das gesamte Tutorial ist jedoch selbsterkl\u00e4rend und kann somit auch ohne Anleitung einer Lehrperson durchgef\u00fchrt werden.","title":"\u00dcber dieses Tutorial"},{"location":"#das-spiel","text":"Das Spiel das in diesem Tutorial erstellt wird, ist ein ganz Simpler Klon des Klassikers Breakout.","title":"Das Spiel"},{"location":"#lizenz","text":"Das gesamte Porjekt steht unter der Creative Commons CC0 Lizenz","title":"Lizenz"},{"location":"GameOver/","text":"Ziele In diesem Kapitel wirst du einen GameOver Text einf\u00fcgen, wenn der Ball hinunter f\u00e4llt und das Spiel anschlie\u00dfend neu starten. Wenn der Ball hinunter f\u00e4llt, soll das Spiel verloren sein, ein GameOver Text angezeigt werden und nach ein paar Sekunden soll das Spiel neu starten. 7.1 Feststellen ob der Ball hinunterf\u00e4llt \u00b6 Eine einfache M\u00f6glichkeit festzustellen wenn der Ball hinunterf\u00e4llt ist folgende: F\u00fcge ein neues GameObject hinzu, nenne es obj_Boden und gib ihm das Sprite spr_Wand F\u00fcge dann eine Instanz dieses Objekts au\u00dferhalb des Raums am unteren Spielfeldrand ein. (Es soll im Spiel nicht zu sehen sein) Wenn der Ball nun mit diesem Objekt kollidiert, wissen wir, dass das Spiel verloren ist. 7.2 Game Over \u00b6 Erstelle im obj_Boden eine Variable vom Typ Bool und nenne sie gameOver . Diese Variable soll zu Beginn false sein. Erstelle dann ein Kollisionsereignis mit obj_Ball in dem folgende Dinge passieren sollen: gameOver auf true setzen Einen Alarm-Countdown starten, der festlegt nach wie vielen Sekunden das Spiel neu gestartet werden soll. Die Instanz des Balls zerst\u00f6ren (Bedenke hier, dass der Ball und nicht de Boden zerst\u00f6rt werden soll) Dein Code sollte in etwa so aussehen: Alarme Ein Alarm in Gamemaker ist ein Timer, den man setzen kann. Es gibt zw\u00f6lf verschiedene Alarme (Nummeriert von 0 bis 11) Wenn man einen Alarm setzt zb. Alarm[0] auf 10 Dann wird nach 10 Sekunden das Ereignis Alarm 0 ausgel\u00f6st. 7.2.1 GameOver Text anzeigen \u00b6 !!Tip \"Hinweis\" Wenn man in Gamemaker irgendetwas auf den Bildschirm malen m\u00f6chte (z.B. einen Text anzeigen), dann muss man dies immer in einem Zeichnen -Ereignis machen! Erstelle im obj_Boden ein GUI zeichnen Ereignis. \u00dcberpr\u00fcfe mit Wenn Variable ob gameOver true ist. Falls ja, dann zeichne mit dem Block Transformierten Wert Zeichnen den Text \"Game Over\" in die Bildschirmmitte. (Mit den Bl\u00f6cken Textausrichtung festlegen und Zeichenfarbe festlegen kannst du weitere Einstellungen vornehmen) 7.2.2 Spiel neu starten \u00b6 Wenn der Alarm 0 ausgel\u00f6st wird (Dieser wurde in 7.2 gestellt) soll das Spiel neu gestartet werden. Erstelle ein Ereignis Alarm 0 in obj_Boden und f\u00fcge den Block Raum neu starten ein. Teste!","title":"8 Game Over"},{"location":"GameOver/#71-feststellen-ob-der-ball-hinunterfallt","text":"Eine einfache M\u00f6glichkeit festzustellen wenn der Ball hinunterf\u00e4llt ist folgende: F\u00fcge ein neues GameObject hinzu, nenne es obj_Boden und gib ihm das Sprite spr_Wand F\u00fcge dann eine Instanz dieses Objekts au\u00dferhalb des Raums am unteren Spielfeldrand ein. (Es soll im Spiel nicht zu sehen sein) Wenn der Ball nun mit diesem Objekt kollidiert, wissen wir, dass das Spiel verloren ist.","title":"7.1 Feststellen ob der Ball hinunterf\u00e4llt"},{"location":"GameOver/#72-game-over","text":"Erstelle im obj_Boden eine Variable vom Typ Bool und nenne sie gameOver . Diese Variable soll zu Beginn false sein. Erstelle dann ein Kollisionsereignis mit obj_Ball in dem folgende Dinge passieren sollen: gameOver auf true setzen Einen Alarm-Countdown starten, der festlegt nach wie vielen Sekunden das Spiel neu gestartet werden soll. Die Instanz des Balls zerst\u00f6ren (Bedenke hier, dass der Ball und nicht de Boden zerst\u00f6rt werden soll) Dein Code sollte in etwa so aussehen: Alarme Ein Alarm in Gamemaker ist ein Timer, den man setzen kann. Es gibt zw\u00f6lf verschiedene Alarme (Nummeriert von 0 bis 11) Wenn man einen Alarm setzt zb. Alarm[0] auf 10 Dann wird nach 10 Sekunden das Ereignis Alarm 0 ausgel\u00f6st.","title":"7.2 Game Over"},{"location":"GameOver/#721-gameover-text-anzeigen","text":"!!Tip \"Hinweis\" Wenn man in Gamemaker irgendetwas auf den Bildschirm malen m\u00f6chte (z.B. einen Text anzeigen), dann muss man dies immer in einem Zeichnen -Ereignis machen! Erstelle im obj_Boden ein GUI zeichnen Ereignis. \u00dcberpr\u00fcfe mit Wenn Variable ob gameOver true ist. Falls ja, dann zeichne mit dem Block Transformierten Wert Zeichnen den Text \"Game Over\" in die Bildschirmmitte. (Mit den Bl\u00f6cken Textausrichtung festlegen und Zeichenfarbe festlegen kannst du weitere Einstellungen vornehmen)","title":"7.2.1 GameOver Text anzeigen"},{"location":"GameOver/#722-spiel-neu-starten","text":"Wenn der Alarm 0 ausgel\u00f6st wird (Dieser wurde in 7.2 gestellt) soll das Spiel neu gestartet werden. Erstelle ein Ereignis Alarm 0 in obj_Boden und f\u00fcge den Block Raum neu starten ein. Teste!","title":"7.2.2 Spiel neu starten"},{"location":"ball1/","text":"6. Der Ball \u00b6 Ziele In diesem Kapitel wirst das Objekt f\u00fcr den Ball erstellen und ihn so programmieren, dass er von den W\u00e4nden und dem Balken abprallt. 6.1 Objekt erstellen \u00b6 Erstelle ein neues Objekt mit dem Namen \"obj_Ball\" und gib ihm das Sprite f\u00fcr den Ball. F\u00fcge eine Instanz von Ball in den room0 ein. 6.2 Bewegung starten \u00b6 Ziel Der Ball soll sich zu Beginn des Spiels schr\u00e4g nach rechts oder links oben bewegen. F\u00fcge daf\u00fcr ein neues Ereignis \"Erstellen\" hinzu. (Dieses Ereignis wird ausgef\u00fchrt, wenn die Instanz des Objekts erstellt wird) Suche unter Bewegung den Befehl Zuf\u00e4llige Richtung festlegen und f\u00fcge ihn ein. Du kannst nun einstellen, welche Richtungen zugelassen sind. W\u00e4hle die Richtungen Oben-Links und Oben-Rechts aus. F\u00fcge danach den Befehl Geschwindigkeit festlegen ein und gibt bei Typ Richtung ein und stelle die Geschwindigkeit auf einen Wert zwischen 5 und 10 (Je schneller, desto schwieriger wird das Spiel) Das Ereignis sollte nun in etwa so aussehen: 6.3 Kollision mit den W\u00e4nden \u00b6 Seitenw\u00e4nde Ziel Wenn der Ball eine der W\u00e4nde ber\u00fchrt, so soll er abprallen. Dies funktioniert folgenderma\u00dfen: Wenn der Ball eine Seitenwand ber\u00fchrt, so muss die Richtung einfach nur in horizontaler (seitlicher) Richtung umgekehrt werden. Hierf\u00fcr gibt es unter Bewegung praktischerweise den Befehl Umkehren und das Ganze soll immer dann passieren, wenn der Ball mit einer Seitenwand kollidiert. F\u00fcge dem Ball also ein neues Ereignis vom Typ Kollision mit obj_WandSeite hinzu. Suche unter Bewegung den Befehl Umkehren und f\u00fcge ihn dem Ereignis hinzu und w\u00e4hle bei Horizontal aus. Das sollte nun folgenderma\u00dfen aussehen: Wand Oben F\u00fcr die obere Wand funktioniert die Kollision genau gleich, nur dass diesmal die Richtung nicht Horizontal umgekehrt wird, sondern Vertikal (also von Oben nach Unten) Erstelle daf\u00fcr ein neues Kollisionsereignis mit obj_WandOben und f\u00fcge den Befehl Umkehren mit Richtung: Vertikal ein. Teste nun dein Programm und der Ball sollte von den W\u00e4nden abprallen. Allerdings f\u00e4llt er nach wie vor durch den Balken durch. 6.4 Kollision mit dem Balken \u00b6 Die Kollision mit dem Balken funktioniert etwas anders: Ziel Je nachdem wo der Ball am Balken aufkommt, soll er in eine andere Richtung abprallen. (Das entspricht zwar nicht wirklich allen Regeln der Physik, macht spieltechnisch aber mehr Spa\u00df) Der Winkel in dem der Ball vom Balken abprallt, soll also nicht von der Richtung des Balls davor abh\u00e4ngen, sondern nur von der Position vo der Ball mit dem Balken kollidiert. Erstelle ein neues Ereignis Kollision mit obj_Balken und f\u00fcge den Befehl Variable Richtung festlegen ein. Um die neue Richtung des Balls zu bestimmen wollen wir einfach die Richtung vom Mittelpunkt des Balkens zum Mittelpunkt des Balls verwenden. Zur Berechnung dieser Richtung k\u00f6nnen wir die Funktion point_direction(x1,y1,x2,y2) verwenden. Diese Funktion berechnet die Richtung von einem Punkt (x1,y1) zu einem anderen Punkt (x2,y2) Position eines Objekts in Gamemaker Die Position eines Objekts in Gamemaker wird in den Variablen x und y gespeichert. Das Schl\u00fcsselword other in einem Kollisionsevent ist immer eine Referenz auf das Objekt mit dem die Kollision stattfindet. Also: x und y sind also die Koordinaten des Objekts, von dem aus das Ereignis ausgef\u00fchrt wird. other.x und other.y sind die Koordinaten des Objekts mit dem die Kollision stattfindet. Um nun die neue Richtung zu bestimmen f\u00fcge den Befehl \"point_direction(other.x,other.y,x,y)\" in den Befehl Variable Richtung festlegen ein. Das sollte folgenderma\u00dfen aussehen: Teste dein Spiel!","title":"6 Der Ball"},{"location":"ball1/#6-der-ball","text":"Ziele In diesem Kapitel wirst das Objekt f\u00fcr den Ball erstellen und ihn so programmieren, dass er von den W\u00e4nden und dem Balken abprallt.","title":"6. Der Ball"},{"location":"ball1/#61-objekt-erstellen","text":"Erstelle ein neues Objekt mit dem Namen \"obj_Ball\" und gib ihm das Sprite f\u00fcr den Ball. F\u00fcge eine Instanz von Ball in den room0 ein.","title":"6.1 Objekt erstellen"},{"location":"ball1/#62-bewegung-starten","text":"Ziel Der Ball soll sich zu Beginn des Spiels schr\u00e4g nach rechts oder links oben bewegen. F\u00fcge daf\u00fcr ein neues Ereignis \"Erstellen\" hinzu. (Dieses Ereignis wird ausgef\u00fchrt, wenn die Instanz des Objekts erstellt wird) Suche unter Bewegung den Befehl Zuf\u00e4llige Richtung festlegen und f\u00fcge ihn ein. Du kannst nun einstellen, welche Richtungen zugelassen sind. W\u00e4hle die Richtungen Oben-Links und Oben-Rechts aus. F\u00fcge danach den Befehl Geschwindigkeit festlegen ein und gibt bei Typ Richtung ein und stelle die Geschwindigkeit auf einen Wert zwischen 5 und 10 (Je schneller, desto schwieriger wird das Spiel) Das Ereignis sollte nun in etwa so aussehen:","title":"6.2 Bewegung starten"},{"location":"ball1/#63-kollision-mit-den-wanden","text":"Seitenw\u00e4nde Ziel Wenn der Ball eine der W\u00e4nde ber\u00fchrt, so soll er abprallen. Dies funktioniert folgenderma\u00dfen: Wenn der Ball eine Seitenwand ber\u00fchrt, so muss die Richtung einfach nur in horizontaler (seitlicher) Richtung umgekehrt werden. Hierf\u00fcr gibt es unter Bewegung praktischerweise den Befehl Umkehren und das Ganze soll immer dann passieren, wenn der Ball mit einer Seitenwand kollidiert. F\u00fcge dem Ball also ein neues Ereignis vom Typ Kollision mit obj_WandSeite hinzu. Suche unter Bewegung den Befehl Umkehren und f\u00fcge ihn dem Ereignis hinzu und w\u00e4hle bei Horizontal aus. Das sollte nun folgenderma\u00dfen aussehen: Wand Oben F\u00fcr die obere Wand funktioniert die Kollision genau gleich, nur dass diesmal die Richtung nicht Horizontal umgekehrt wird, sondern Vertikal (also von Oben nach Unten) Erstelle daf\u00fcr ein neues Kollisionsereignis mit obj_WandOben und f\u00fcge den Befehl Umkehren mit Richtung: Vertikal ein. Teste nun dein Programm und der Ball sollte von den W\u00e4nden abprallen. Allerdings f\u00e4llt er nach wie vor durch den Balken durch.","title":"6.3 Kollision mit den W\u00e4nden"},{"location":"ball1/#64-kollision-mit-dem-balken","text":"Die Kollision mit dem Balken funktioniert etwas anders: Ziel Je nachdem wo der Ball am Balken aufkommt, soll er in eine andere Richtung abprallen. (Das entspricht zwar nicht wirklich allen Regeln der Physik, macht spieltechnisch aber mehr Spa\u00df) Der Winkel in dem der Ball vom Balken abprallt, soll also nicht von der Richtung des Balls davor abh\u00e4ngen, sondern nur von der Position vo der Ball mit dem Balken kollidiert. Erstelle ein neues Ereignis Kollision mit obj_Balken und f\u00fcge den Befehl Variable Richtung festlegen ein. Um die neue Richtung des Balls zu bestimmen wollen wir einfach die Richtung vom Mittelpunkt des Balkens zum Mittelpunkt des Balls verwenden. Zur Berechnung dieser Richtung k\u00f6nnen wir die Funktion point_direction(x1,y1,x2,y2) verwenden. Diese Funktion berechnet die Richtung von einem Punkt (x1,y1) zu einem anderen Punkt (x2,y2) Position eines Objekts in Gamemaker Die Position eines Objekts in Gamemaker wird in den Variablen x und y gespeichert. Das Schl\u00fcsselword other in einem Kollisionsevent ist immer eine Referenz auf das Objekt mit dem die Kollision stattfindet. Also: x und y sind also die Koordinaten des Objekts, von dem aus das Ereignis ausgef\u00fchrt wird. other.x und other.y sind die Koordinaten des Objekts mit dem die Kollision stattfindet. Um nun die neue Richtung zu bestimmen f\u00fcge den Befehl \"point_direction(other.x,other.y,x,y)\" in den Befehl Variable Richtung festlegen ein. Das sollte folgenderma\u00dfen aussehen: Teste dein Spiel!","title":"6.4 Kollision mit dem Balken"},{"location":"bar/","text":"4. Der Balken \u00b6 Ziele In diesem Kapitel wirst das Objekt f\u00fcr den Balken erstellen und programmieren. 4.1. Objekt erstellen \u00b6 Klicke mit der rechten Maustaste unter Ressources auf Objekte -> Objekt erstellen Im Workspace siehst du nun das neu erstellte Objekt. Gib ihm den Namen \"obj_Balken\" und w\u00e4hle das Sprite f\u00fcr den Balken aus. Mache danach einen Doppelklick auf room0 (unter Ressourcen->R\u00e4ume) und f\u00fcge das Objekt mit Drag and Drop in den Raum ein. Du kannst das Spiel nun auch schon testen! Zum Starten musst du einfach auf den \"Play\"-Button in der oberen Leiste dr\u00fccken. Allerdings tut sich in unserem Spiel ja noch gar nichts! 4.2 Bewegung \u00b6 Der Balken soll sich bewegen, wenn du auf die Pfeiltaste links bzw. rechts dr\u00fcckst. Lege als Erstes eine Variable f\u00fcr die Bewegungsgeschwindigkeit an. Gehe daf\u00fcr im Workspace wieder zum obj_Balken und klicke auf Variablendefinitionen -> Hinzuf\u00fcgen und erstelle eine Variable vom Typ Real , gib ihr den Namen \"geschwindigkeit\" und setze den Standardwert auf 15 . Ereignisse Das Verhalten von Gamemaker Objekten wird \u00fcber sogenannte Ereignisse geregelt. Ereignisse sind z.B. das Dr\u00fccken einer Taste oder eine Kollision. Klicke auf Ereignis hinzuf\u00fcgen -> Taste gehalten -> links um ein neues Ereignis hinzuzuf\u00fcgen. Im Workspace siehst du nun ein neues Fenster f\u00fcr das gerade erstellte Ereignis. Ansicht \u00e4ndern im Workspace Wenn du im Workspace die mittlere Maustaste gedr\u00fcckt h\u00e4ltst kannst du die Ansicht verschieben. Mit Strg und Mausrad kannst du Zoomen. In dem Ereignisfenster siehst du rechts viele Befehle. Diese k\u00f6nnen per Drag and Drop einfach zum Ereignis hinzugef\u00fcgt werden. Suche unter dem Punkt Bewegung den Befehl auf Position springen und f\u00fcge in ein. Gib dann bei X \"-geschwindgkeit\" ein und setze den Haken bei Relativ Das hei\u00dft, wenn du die linke Pfeiltaste dr\u00fcckst h\u00fcpft das Objekt um so viele Pixel nach links (in negativer Richtung an der X-Achse), wie in der Variable geschwindigkeit festgelegt. Wiederhole dies nun auch noch f\u00fcr die rechte Pfeiltaste, nur diesmal ohne das Minus vor geschwindigkeit damit sich das Objekt nach Rechts bewegt. Teste das Programm (mit dem Play-Button in der oberen Leiste). Wenn du alles richtig gemacht hast, solltest du mit den Pfeiltasten den Balken nach rechts und links bewegen k\u00f6nnen.","title":"4 Der Balken"},{"location":"bar/#4-der-balken","text":"Ziele In diesem Kapitel wirst das Objekt f\u00fcr den Balken erstellen und programmieren.","title":"4. Der Balken"},{"location":"bar/#41-objekt-erstellen","text":"Klicke mit der rechten Maustaste unter Ressources auf Objekte -> Objekt erstellen Im Workspace siehst du nun das neu erstellte Objekt. Gib ihm den Namen \"obj_Balken\" und w\u00e4hle das Sprite f\u00fcr den Balken aus. Mache danach einen Doppelklick auf room0 (unter Ressourcen->R\u00e4ume) und f\u00fcge das Objekt mit Drag and Drop in den Raum ein. Du kannst das Spiel nun auch schon testen! Zum Starten musst du einfach auf den \"Play\"-Button in der oberen Leiste dr\u00fccken. Allerdings tut sich in unserem Spiel ja noch gar nichts!","title":"4.1. Objekt erstellen"},{"location":"bar/#42-bewegung","text":"Der Balken soll sich bewegen, wenn du auf die Pfeiltaste links bzw. rechts dr\u00fcckst. Lege als Erstes eine Variable f\u00fcr die Bewegungsgeschwindigkeit an. Gehe daf\u00fcr im Workspace wieder zum obj_Balken und klicke auf Variablendefinitionen -> Hinzuf\u00fcgen und erstelle eine Variable vom Typ Real , gib ihr den Namen \"geschwindigkeit\" und setze den Standardwert auf 15 . Ereignisse Das Verhalten von Gamemaker Objekten wird \u00fcber sogenannte Ereignisse geregelt. Ereignisse sind z.B. das Dr\u00fccken einer Taste oder eine Kollision. Klicke auf Ereignis hinzuf\u00fcgen -> Taste gehalten -> links um ein neues Ereignis hinzuzuf\u00fcgen. Im Workspace siehst du nun ein neues Fenster f\u00fcr das gerade erstellte Ereignis. Ansicht \u00e4ndern im Workspace Wenn du im Workspace die mittlere Maustaste gedr\u00fcckt h\u00e4ltst kannst du die Ansicht verschieben. Mit Strg und Mausrad kannst du Zoomen. In dem Ereignisfenster siehst du rechts viele Befehle. Diese k\u00f6nnen per Drag and Drop einfach zum Ereignis hinzugef\u00fcgt werden. Suche unter dem Punkt Bewegung den Befehl auf Position springen und f\u00fcge in ein. Gib dann bei X \"-geschwindgkeit\" ein und setze den Haken bei Relativ Das hei\u00dft, wenn du die linke Pfeiltaste dr\u00fcckst h\u00fcpft das Objekt um so viele Pixel nach links (in negativer Richtung an der X-Achse), wie in der Variable geschwindigkeit festgelegt. Wiederhole dies nun auch noch f\u00fcr die rechte Pfeiltaste, nur diesmal ohne das Minus vor geschwindigkeit damit sich das Objekt nach Rechts bewegt. Teste das Programm (mit dem Play-Button in der oberen Leiste). Wenn du alles richtig gemacht hast, solltest du mit den Pfeiltasten den Balken nach rechts und links bewegen k\u00f6nnen.","title":"4.2 Bewegung"},{"location":"brick/","text":"Ziele In diesem Kapitel wirst die Ziegel erstellen und die Kollisionen zwischen Ziegel und Ball programmieren. Erstelle ein Objekt mit dem Namen \"obj_Ziegel\" und weise ihm das Sprite spr_Ziegel zu. F\u00fcge dann einige Instanzen der Ziegel per Drag and Drop in den room0 ein. Es sollte in etwa so aussehen: 7.1 Kollision Ball und Ziegel \u00b6 Ziel Wenn der Ball mit einem Ziegel kollidiert, sollen folgende Dinge passieren: 1. Der Ball soll abprallen, je nachdem von wo aus er auf einen Ziegel trifft 2. Der Ziegel soll entfernt werden Die Kollision mit dem Ziegel programmieren wir wieder in einem Ereignis im obj_Ball Gehe also im Workspace zu obj_Ball und f\u00fcge ein Kollsisionsereignis mit obj_Ziegel ein. Leider ist das Abprallen diesmal nicht so einfach, wie mit den Seitenw\u00e4nden, denn wir m\u00fcssen feststellen ob der Ball von Oben bzw. Unten oder von der Seite mit dem Ziegel kollidiert. Je nachdem welcher Fall auftritt ist, m\u00fcssen wir dann einfach nur wieder die Richtung in horizontaler oder vertikaler Richtung umkehren. (wie in 6.3) Feststellen von welcher Seite der Ball kollidiert \u00b6 Die Variablen hspeed und vspeed In hspeed wird die horizontale (also seitliche) Geschwindigkeit eines Objekts gespeichert. Das ist die Anzahl an Pixel, die sich ein Objekt in jedem Schritt (Step) der Gameloop nach rechts bzw. links bewegt. In vspeed wird die vertikale (also oben/unten) Geschwindigkeit eines Objekts gespeichert. Kollisionshandling in Gamemaker Das Kollisionsereignis in Gamemaker wird aufgerufen, wenn sich die Kollisionsmasken zweier Objekte bereits \u00fcberlappen. (Nicht kurz davor!) Zum Zeitpunkt an dem eine Kollision auftritt, liegt der Ball bereits \u00fcber dem Ziegel. Um festzustellen ob der Ball den Ziegel von der Seite oder von unten/oben trifft gehen wir folgenderma\u00dfen vor: Eine Kollision tritt auf. Wir \u00fcberpr\u00fcfen, ob eine Kollision stattfindet, wenn wir den Ball um -vspeed -Pixel vertikal verschieben. Ist das der Fall muss die Kollision von der Seite entstanden sein. Wir m\u00fcssen die Richtung des Balls in horizontaler Richtung umkehren. Ist die Bedingung in 2. nicht erf\u00fcllt \u00fcberpr\u00fcfen wir, ob der Ball immer noch kollidiert, wenn wir ihn um -hspeed Pixel in seitlicher Richtung verschieben. Wenn dann noch immer eine Kollision stattfindet, muss die Kollision von oben oder unten entstanden sein und wir m\u00fcssen die Richtung vertikal umkehren. Zum Schluss muss man nur noch die Instanz des Ziegels zerst\u00f6ren Diesen Algorithmus implementieren wir nun: Suche in dem Kollisionsereignis zuerst nach Wenn Objekt am Ort ist unter Kollisionen. Gib als Objekt obj_Ziegel an und bei Y \"-vspeed\". Setze au\u00dferdem die beiden H\u00e4kchen bei Relativ Diese Bedingung \u00fcberpr\u00fcft nun, ob eine Kollision mit einer Instanz von obj_Ziegel entstehen w\u00fcrde, wenn der Ball an der Position (x,y-vspeed) w\u00e4re. F\u00fcge den Block Umkehren rechts (!) an den Wenn Objekt am Ort ist Block an und stelle die Richtung auf Horizontal Achtung Wenn du den Block nicht von Rechts anh\u00e4ngst und das Ganze bei dir so aussieht: Dann wird die Geschwindigkeit immer umgekehrt und nicht nur, wenn die Bedingung im Block dar\u00fcber erf\u00fcllt ist. Implementiere nun Punkt 3. aus dem oberen Algorithmus. Zuerst ben\u00f6tigst du den Else -Block. F\u00fcge diesen hinten an den Wenn Objekt am Ort ist an. H\u00e4nge an den Else -Block von rechts einen Wenn Objekt am Ort ist Block an, mache die n\u00f6tigen Einstellungen und kehre die Geschwindigkeit in vertikal um, wenn die Bedingung zutrifft. Hinweis Der Else -Block wird in Gamemaker f\u00e4lschlicherweise mit Dann \u00fcbersetzt. Eine korrekte \u00dcbersetzung w\u00e4re Sonst Im Letzten Schritt muss nun der Ziegel zerst\u00f6rt werden. Verwende daf\u00fcr den Block Instanz zerst\u00f6ren und h\u00e4nge ihn so an, dass die Instanz zum Schluss zerst\u00f6rt wird. Wichtig ist, dass du bei Instanz zerst\u00f6ren bei Anzuwenden auf andere ausw\u00e4hlst, sonst wird der Ball zerst\u00f6rt. Teste das Spiel!","title":"7 Die Ziegel"},{"location":"brick/#71-kollision-ball-und-ziegel","text":"Ziel Wenn der Ball mit einem Ziegel kollidiert, sollen folgende Dinge passieren: 1. Der Ball soll abprallen, je nachdem von wo aus er auf einen Ziegel trifft 2. Der Ziegel soll entfernt werden Die Kollision mit dem Ziegel programmieren wir wieder in einem Ereignis im obj_Ball Gehe also im Workspace zu obj_Ball und f\u00fcge ein Kollsisionsereignis mit obj_Ziegel ein. Leider ist das Abprallen diesmal nicht so einfach, wie mit den Seitenw\u00e4nden, denn wir m\u00fcssen feststellen ob der Ball von Oben bzw. Unten oder von der Seite mit dem Ziegel kollidiert. Je nachdem welcher Fall auftritt ist, m\u00fcssen wir dann einfach nur wieder die Richtung in horizontaler oder vertikaler Richtung umkehren. (wie in 6.3)","title":"7.1 Kollision Ball und Ziegel"},{"location":"brick/#feststellen-von-welcher-seite-der-ball-kollidiert","text":"Die Variablen hspeed und vspeed In hspeed wird die horizontale (also seitliche) Geschwindigkeit eines Objekts gespeichert. Das ist die Anzahl an Pixel, die sich ein Objekt in jedem Schritt (Step) der Gameloop nach rechts bzw. links bewegt. In vspeed wird die vertikale (also oben/unten) Geschwindigkeit eines Objekts gespeichert. Kollisionshandling in Gamemaker Das Kollisionsereignis in Gamemaker wird aufgerufen, wenn sich die Kollisionsmasken zweier Objekte bereits \u00fcberlappen. (Nicht kurz davor!) Zum Zeitpunkt an dem eine Kollision auftritt, liegt der Ball bereits \u00fcber dem Ziegel. Um festzustellen ob der Ball den Ziegel von der Seite oder von unten/oben trifft gehen wir folgenderma\u00dfen vor: Eine Kollision tritt auf. Wir \u00fcberpr\u00fcfen, ob eine Kollision stattfindet, wenn wir den Ball um -vspeed -Pixel vertikal verschieben. Ist das der Fall muss die Kollision von der Seite entstanden sein. Wir m\u00fcssen die Richtung des Balls in horizontaler Richtung umkehren. Ist die Bedingung in 2. nicht erf\u00fcllt \u00fcberpr\u00fcfen wir, ob der Ball immer noch kollidiert, wenn wir ihn um -hspeed Pixel in seitlicher Richtung verschieben. Wenn dann noch immer eine Kollision stattfindet, muss die Kollision von oben oder unten entstanden sein und wir m\u00fcssen die Richtung vertikal umkehren. Zum Schluss muss man nur noch die Instanz des Ziegels zerst\u00f6ren Diesen Algorithmus implementieren wir nun: Suche in dem Kollisionsereignis zuerst nach Wenn Objekt am Ort ist unter Kollisionen. Gib als Objekt obj_Ziegel an und bei Y \"-vspeed\". Setze au\u00dferdem die beiden H\u00e4kchen bei Relativ Diese Bedingung \u00fcberpr\u00fcft nun, ob eine Kollision mit einer Instanz von obj_Ziegel entstehen w\u00fcrde, wenn der Ball an der Position (x,y-vspeed) w\u00e4re. F\u00fcge den Block Umkehren rechts (!) an den Wenn Objekt am Ort ist Block an und stelle die Richtung auf Horizontal Achtung Wenn du den Block nicht von Rechts anh\u00e4ngst und das Ganze bei dir so aussieht: Dann wird die Geschwindigkeit immer umgekehrt und nicht nur, wenn die Bedingung im Block dar\u00fcber erf\u00fcllt ist. Implementiere nun Punkt 3. aus dem oberen Algorithmus. Zuerst ben\u00f6tigst du den Else -Block. F\u00fcge diesen hinten an den Wenn Objekt am Ort ist an. H\u00e4nge an den Else -Block von rechts einen Wenn Objekt am Ort ist Block an, mache die n\u00f6tigen Einstellungen und kehre die Geschwindigkeit in vertikal um, wenn die Bedingung zutrifft. Hinweis Der Else -Block wird in Gamemaker f\u00e4lschlicherweise mit Dann \u00fcbersetzt. Eine korrekte \u00dcbersetzung w\u00e4re Sonst Im Letzten Schritt muss nun der Ziegel zerst\u00f6rt werden. Verwende daf\u00fcr den Block Instanz zerst\u00f6ren und h\u00e4nge ihn so an, dass die Instanz zum Schluss zerst\u00f6rt wird. Wichtig ist, dass du bei Instanz zerst\u00f6ren bei Anzuwenden auf andere ausw\u00e4hlst, sonst wird der Ball zerst\u00f6rt. Teste das Spiel!","title":"Feststellen von welcher Seite der Ball kollidiert"},{"location":"firststeps/","text":"2. Erste Schritte \u00b6 Ziele In diesem Kapitel wirst du ein neues Projekt anlegen und die wichtigsten Elemente der Bedienoberfl\u00e4che kennenlernen Neues Projekt anlegen \u00b6 Wenn du Gamemaker zum ersten Mal startest, kommst du auf die Startseite . Klicke hier auf Neu, um ein neues Projekt anzulegen und w\u00e4hle Drag und Drop Anschlie\u00dfend wirst du gefragt, wo dein neues Projekt gespeichert werden soll. W\u00e4hle einen sinnvollen Speicherort aus und gib dem Projekt den Namen Brickout Bedienoberfl\u00e4che \u00b6 Die beiden wichtigsten Punkte in der Bedienoberfl\u00e4che sind der Workspace und die Ressourcen Ressourcen \u00b6 Unter Ressourcen kannst du alle im Spiel verwendeten Resourcen verwalten. Die wichtigsten Ressourcen f\u00fcr unser Projekt sind: Sprites Objekte R\u00e4ume Objekte \u00b6 Alle Dinge die in einem Gamemaker-Spiel etwas tun sind Objekte. F\u00fcr unser Spiel ben\u00f6tigen wir zum Beispiel Objekte f\u00fcr den Ball, den Balken und die Ziegel. Objekt vs. Instanz \u00b6 Wenn man in Gamemaker ein Objekt erstellt, wird noch nichts ins Spiel eingef\u00fcgt. Man erstellt nur eine Vorlage die das Verhalten und die Eigenschaften eines Objekts festlegen. Sp\u00e4ter kann man einfach eine Instanz dieses Objekts in das Spiel einf\u00fcgen. Zum Beispiel: F\u00fcr unser Spiel ben\u00f6tigst du viele Ziegel, die man mit dem Ball zerschie\u00dfen kann. Du musst hierf\u00fcr nur ein Objekt Ziegel erstellen. Von diesem Objekt kannst du dann ganz viele Instanzen ins Spiel einf\u00fcgen. Sprites \u00b6 Sprites sind die Grafiken die f\u00fcr die Spielobjekte verwendet werden. R\u00e4ume \u00b6 In R\u00e4umen werden die Instanzen von Objekten eingef\u00fcgt. Man kann sich die R\u00e4ume auch wie einzelne Spiellevels vorstellen. Jedes Spiel ben\u00f6tigt mindestens einen Raum. (Deshalb wurde auch schon beim Erstellen des Projekts automatisch der Raum room0 erstellt)","title":"2 Erste Schritte"},{"location":"firststeps/#2-erste-schritte","text":"Ziele In diesem Kapitel wirst du ein neues Projekt anlegen und die wichtigsten Elemente der Bedienoberfl\u00e4che kennenlernen","title":"2. Erste Schritte"},{"location":"firststeps/#neues-projekt-anlegen","text":"Wenn du Gamemaker zum ersten Mal startest, kommst du auf die Startseite . Klicke hier auf Neu, um ein neues Projekt anzulegen und w\u00e4hle Drag und Drop Anschlie\u00dfend wirst du gefragt, wo dein neues Projekt gespeichert werden soll. W\u00e4hle einen sinnvollen Speicherort aus und gib dem Projekt den Namen Brickout","title":"Neues Projekt anlegen"},{"location":"firststeps/#bedienoberflache","text":"Die beiden wichtigsten Punkte in der Bedienoberfl\u00e4che sind der Workspace und die Ressourcen","title":"Bedienoberfl\u00e4che"},{"location":"firststeps/#ressourcen","text":"Unter Ressourcen kannst du alle im Spiel verwendeten Resourcen verwalten. Die wichtigsten Ressourcen f\u00fcr unser Projekt sind: Sprites Objekte R\u00e4ume","title":"Ressourcen"},{"location":"firststeps/#objekte","text":"Alle Dinge die in einem Gamemaker-Spiel etwas tun sind Objekte. F\u00fcr unser Spiel ben\u00f6tigen wir zum Beispiel Objekte f\u00fcr den Ball, den Balken und die Ziegel.","title":"Objekte"},{"location":"firststeps/#objekt-vs-instanz","text":"Wenn man in Gamemaker ein Objekt erstellt, wird noch nichts ins Spiel eingef\u00fcgt. Man erstellt nur eine Vorlage die das Verhalten und die Eigenschaften eines Objekts festlegen. Sp\u00e4ter kann man einfach eine Instanz dieses Objekts in das Spiel einf\u00fcgen. Zum Beispiel: F\u00fcr unser Spiel ben\u00f6tigst du viele Ziegel, die man mit dem Ball zerschie\u00dfen kann. Du musst hierf\u00fcr nur ein Objekt Ziegel erstellen. Von diesem Objekt kannst du dann ganz viele Instanzen ins Spiel einf\u00fcgen.","title":"Objekt vs. Instanz"},{"location":"firststeps/#sprites","text":"Sprites sind die Grafiken die f\u00fcr die Spielobjekte verwendet werden.","title":"Sprites"},{"location":"firststeps/#raume","text":"In R\u00e4umen werden die Instanzen von Objekten eingef\u00fcgt. Man kann sich die R\u00e4ume auch wie einzelne Spiellevels vorstellen. Jedes Spiel ben\u00f6tigt mindestens einen Raum. (Deshalb wurde auch schon beim Erstellen des Projekts automatisch der Raum room0 erstellt)","title":"R\u00e4ume"},{"location":"installation/","text":"Download und Installation \u00b6 Hinweis Wenn du Gamemaker Studio 2 bereits auf deinem Computer installiert hast, kannst du dieses Kapitel einfach \u00fcberspringen. Registrierung \u00b6 Um Gamemaker herunterladen zu k\u00f6nnen, ben\u00f6tigt man einen Yoyogames Account. Gehe auf die Yoyogames-Website und erstelle einen Account. Download von Gamemaker Studio 2 \u00b6 Gehe auf der Website auf Get Gamemaker , klicke auf die Free Trial Version und w\u00e4hle Gamemaker Studio 2, sowie Windows oder Mac (Je nachdem welches Betriebssystem du verwendest). Installation \u00b6 Wenn der Download des Installationsprogramms fertig ist, starte dieses und installiere GamemakerStudio 2.","title":"1 Installation"},{"location":"installation/#download-und-installation","text":"Hinweis Wenn du Gamemaker Studio 2 bereits auf deinem Computer installiert hast, kannst du dieses Kapitel einfach \u00fcberspringen.","title":"Download und Installation"},{"location":"installation/#registrierung","text":"Um Gamemaker herunterladen zu k\u00f6nnen, ben\u00f6tigt man einen Yoyogames Account. Gehe auf die Yoyogames-Website und erstelle einen Account.","title":"Registrierung"},{"location":"installation/#download-von-gamemaker-studio-2","text":"Gehe auf der Website auf Get Gamemaker , klicke auf die Free Trial Version und w\u00e4hle Gamemaker Studio 2, sowie Windows oder Mac (Je nachdem welches Betriebssystem du verwendest).","title":"Download von Gamemaker Studio 2"},{"location":"installation/#installation","text":"Wenn der Download des Installationsprogramms fertig ist, starte dieses und installiere GamemakerStudio 2.","title":"Installation"},{"location":"sprites/","text":"3. Importieren der Sprites \u00b6 Ziele In diesem Kapitel wirst die Grafiken f\u00fcr dein Spiel herunterladen und in das Spiel importieren. F\u00fcr das Spiel ben\u00f6tigen wir 2D-Grafiken die wir als Sprites in unser Spiel einbauen. https://www.opengameart.org ist eine gro\u00dfartige Quelle f\u00fcr GameAssets(Sprites, Sounds, 3D-Modelle, etc.) die du f\u00fcr deine Games verwenden kannst. Achtung Die auf OpengameArts zur Verf\u00fcgung gestellten Assets unterliegen selbstverst\u00e4ndlich trotzdem einem Copyright. Du musst immer sicher stellen, dass du die Copyrightbedingungen nicht verletzt, wenn du Assets aus dem Internet herunterl\u00e4dst. F\u00fcr unseren Breakout-Klon verwenden wir Breakout (Brick Breaker) Tile Set - Free Wenn du auf den Link klickst siehst du, dass diese Grafiken unter der CC0 -Lizenz stehen. Das bedeutet, du kannst die Assets f\u00fcr eigene Projekte (sogar kommerziell) verwenden, ver\u00e4ndern, weitergeben darfst. Mehr Infos dazu hier Importieren der Sprites in Gamemaker \u00b6 Lade dir das Paket von hier runter und entpacke es in einen geeigneten Ordner. 3.1 Ziegel \u00b6 Gehe wieder zur\u00fcck in Gamemaker. Klicke unter Ressourcen mit der rechten Maustaste auf Sprites und dann auf Sprite aus Bild(ern) erstellen Gehe dann im entpackten Verzeichnis in den Unterordner \"Breakout Tile Set Free\\PNG\" und \u00f6ffne 01-Breakout-Tiles.png Nun siehst du im Workspace die Einstellungen des gerade importierten Sprites. Benenne das Sprite um in \"spr_Ziegel\" und \u00e4ndere die Gr\u00f6\u00dfe des Bildes \u00fcber Bild skalieren auf 64x21 Pixel. Wichtig ist auch, dass bei Kollisionsmaske automatisch und Rechteck eingestellt ist. Kollisionsmaske Eine Kollision zweier Objekte findet immer dann statt, wenn sich die Kollisionsmasken der Sprites dieser Objekte \u00fcberlappen. Das ist wichtig um z.B. festzustellen wann die Kugel den Ziegel ber\u00fchrt. Es ist wichtig immer m\u00f6glichst einfache Formen f\u00fcr die Kollisionsmaske zu verwenden, da die Berechnungen zur Kollisionserkennung f\u00fcr komplexe Figuren sehr aufw\u00e4ndig sind und zu Lags (Ruckeln) im Spiel f\u00fchren kann. 3.2 Ball \u00b6 Importiere wie in 3.1 das Sprite f\u00fcr den Ball. Verwende hierf\u00fcr die Datei 58-Breakout-Tiles.png und benenne das Sprite \"spr_Ball\" \u00c4ndere die Skalierung auf 32x32 Pixel und stelle die Kollisionsmaske auf \"Ellipse\" Stelle au\u00dferdem die Koordinaten des Ursprungs des Sprites auf \"Mitte mittig\" 3.3 Balken \u00b6 Importiere nun das Sprite f\u00fcr den Balken. Verwende die Datei 50-Breakout-Tiles.png , benenne es \"spr_Balken\", stelle die Skalierung auf 121x32 Pixel und die Kollisionsmaske auf \"Pr\u00e4zise\" Stelle au\u00dferdem die Koordinaten des Ursprungs des Sprites auf \"Mitte mittig\" Hinweis Dass diese Kollisionsmasken ein bisschen langsamer sind, ist nicht so schlimm, da in dem Spiel nur ein Balken und ein Ball vorkommen. (F\u00fcr Objekte von denen es viele Instanzen gibt, sollte man Fall die Kollisionsmaske \"Pr\u00e4zse\" nicht verwenden) 3.4 Wand \u00b6 Zuletzt erstellen wir noch ein einf\u00e4rbiges Sprite f\u00fcr die W\u00e4nde oben und an den Seiten. Klicke daf\u00fcr wieder mit der rechten Maustaste auf Sprites und dann auf Sprite erstellen Mach dann einen Doppelklick auf das leere Bild des Sprites (Siehe Screenshot unten) und f\u00fclle das Bild einfach mit einer Farbe deiner Wahl. Gib dem Sprite anschlie\u00dfend noch den Namen \"spr_Wand\" Du solltest nun die vier Sprites f\u00fcr Ziegel, Ball, Balken und Wand in deinem Projekt haben.","title":"3 Importieren der Sprites"},{"location":"sprites/#3-importieren-der-sprites","text":"Ziele In diesem Kapitel wirst die Grafiken f\u00fcr dein Spiel herunterladen und in das Spiel importieren. F\u00fcr das Spiel ben\u00f6tigen wir 2D-Grafiken die wir als Sprites in unser Spiel einbauen. https://www.opengameart.org ist eine gro\u00dfartige Quelle f\u00fcr GameAssets(Sprites, Sounds, 3D-Modelle, etc.) die du f\u00fcr deine Games verwenden kannst. Achtung Die auf OpengameArts zur Verf\u00fcgung gestellten Assets unterliegen selbstverst\u00e4ndlich trotzdem einem Copyright. Du musst immer sicher stellen, dass du die Copyrightbedingungen nicht verletzt, wenn du Assets aus dem Internet herunterl\u00e4dst. F\u00fcr unseren Breakout-Klon verwenden wir Breakout (Brick Breaker) Tile Set - Free Wenn du auf den Link klickst siehst du, dass diese Grafiken unter der CC0 -Lizenz stehen. Das bedeutet, du kannst die Assets f\u00fcr eigene Projekte (sogar kommerziell) verwenden, ver\u00e4ndern, weitergeben darfst. Mehr Infos dazu hier","title":"3. Importieren der Sprites"},{"location":"sprites/#importieren-der-sprites-in-gamemaker","text":"Lade dir das Paket von hier runter und entpacke es in einen geeigneten Ordner.","title":"Importieren der Sprites in Gamemaker"},{"location":"sprites/#31-ziegel","text":"Gehe wieder zur\u00fcck in Gamemaker. Klicke unter Ressourcen mit der rechten Maustaste auf Sprites und dann auf Sprite aus Bild(ern) erstellen Gehe dann im entpackten Verzeichnis in den Unterordner \"Breakout Tile Set Free\\PNG\" und \u00f6ffne 01-Breakout-Tiles.png Nun siehst du im Workspace die Einstellungen des gerade importierten Sprites. Benenne das Sprite um in \"spr_Ziegel\" und \u00e4ndere die Gr\u00f6\u00dfe des Bildes \u00fcber Bild skalieren auf 64x21 Pixel. Wichtig ist auch, dass bei Kollisionsmaske automatisch und Rechteck eingestellt ist. Kollisionsmaske Eine Kollision zweier Objekte findet immer dann statt, wenn sich die Kollisionsmasken der Sprites dieser Objekte \u00fcberlappen. Das ist wichtig um z.B. festzustellen wann die Kugel den Ziegel ber\u00fchrt. Es ist wichtig immer m\u00f6glichst einfache Formen f\u00fcr die Kollisionsmaske zu verwenden, da die Berechnungen zur Kollisionserkennung f\u00fcr komplexe Figuren sehr aufw\u00e4ndig sind und zu Lags (Ruckeln) im Spiel f\u00fchren kann.","title":"3.1 Ziegel"},{"location":"sprites/#32-ball","text":"Importiere wie in 3.1 das Sprite f\u00fcr den Ball. Verwende hierf\u00fcr die Datei 58-Breakout-Tiles.png und benenne das Sprite \"spr_Ball\" \u00c4ndere die Skalierung auf 32x32 Pixel und stelle die Kollisionsmaske auf \"Ellipse\" Stelle au\u00dferdem die Koordinaten des Ursprungs des Sprites auf \"Mitte mittig\"","title":"3.2 Ball"},{"location":"sprites/#33-balken","text":"Importiere nun das Sprite f\u00fcr den Balken. Verwende die Datei 50-Breakout-Tiles.png , benenne es \"spr_Balken\", stelle die Skalierung auf 121x32 Pixel und die Kollisionsmaske auf \"Pr\u00e4zise\" Stelle au\u00dferdem die Koordinaten des Ursprungs des Sprites auf \"Mitte mittig\" Hinweis Dass diese Kollisionsmasken ein bisschen langsamer sind, ist nicht so schlimm, da in dem Spiel nur ein Balken und ein Ball vorkommen. (F\u00fcr Objekte von denen es viele Instanzen gibt, sollte man Fall die Kollisionsmaske \"Pr\u00e4zse\" nicht verwenden)","title":"3.3 Balken"},{"location":"sprites/#34-wand","text":"Zuletzt erstellen wir noch ein einf\u00e4rbiges Sprite f\u00fcr die W\u00e4nde oben und an den Seiten. Klicke daf\u00fcr wieder mit der rechten Maustaste auf Sprites und dann auf Sprite erstellen Mach dann einen Doppelklick auf das leere Bild des Sprites (Siehe Screenshot unten) und f\u00fclle das Bild einfach mit einer Farbe deiner Wahl. Gib dem Sprite anschlie\u00dfend noch den Namen \"spr_Wand\" Du solltest nun die vier Sprites f\u00fcr Ziegel, Ball, Balken und Wand in deinem Projekt haben.","title":"3.4 Wand"},{"location":"wall/","text":"5. Die Seitenw\u00e4nde \u00b6 Ziele In diesem Kapitel wirst die Seitenw\u00e4nde erstellen, die verhindern, dass der Ball aus dem Spielfeld fliegt. Erstelle zwei neue Objekte mit den Namen \"obj_WandSeite\" und \"obj_WandOben\" und gib beiden Objekten das Sprite \"spr_Wand\" Gehe wieder in room0 und f\u00fcge am oberen Rand eine Instanz von obj_WandOben ein und ziehe sie mit der Maus so gro\u00df, dass sie \u00fcber die ganze Breite des Raums geht. F\u00fcge dann links und rechts je eine Instanz von obj_WandSeite ein und ziehe sie so gro\u00df, dass sie die ganze H\u00f6he des Raums abdecken. Der Raum sollte nun in etwa so aussehen:","title":"5 Die Seitenw\u00e4nde"},{"location":"wall/#5-die-seitenwande","text":"Ziele In diesem Kapitel wirst die Seitenw\u00e4nde erstellen, die verhindern, dass der Ball aus dem Spielfeld fliegt. Erstelle zwei neue Objekte mit den Namen \"obj_WandSeite\" und \"obj_WandOben\" und gib beiden Objekten das Sprite \"spr_Wand\" Gehe wieder in room0 und f\u00fcge am oberen Rand eine Instanz von obj_WandOben ein und ziehe sie mit der Maus so gro\u00df, dass sie \u00fcber die ganze Breite des Raums geht. F\u00fcge dann links und rechts je eine Instanz von obj_WandSeite ein und ziehe sie so gro\u00df, dass sie die ganze H\u00f6he des Raums abdecken. Der Raum sollte nun in etwa so aussehen:","title":"5. Die Seitenw\u00e4nde"}]}